openapi: 3.0.0
info:
  version: "0.0.4"
  title: 'IPFS Pinning Service API'
  x-logo:
    url: "https://bafybeidehxarrk54mkgyl5yxbgjzqilp6tkaz2or36jhq24n3rdtuven54.ipfs.dweb.link/?filename=ipfs-pinning-service.svg"
  description: "
  
  
## About this spec

The IPFS Pinning Service API is intended to be an implementation-agnostic API&#x3a;

- For use and implementation by pinning service providers

- For use in client mode by IPFS nodes and GUI-based applications


> **Note**: while ready for implementation, this spec is still a work in progress! 🏗️

> **Your input and feedback are welcome and valuable as we develop this API spec.

> Please join the design discussion at [github.com/ipfs/pinning-services-api-spec](https://github.com/ipfs/pinning-services-api-spec).**


# Schemas

This section describes the most important object types and conventions.


A full list of fields and schemas can be found in the `schemas` section of the YAML file.

## Objects

### Pin object

The `Pin` object is a representation of a pin request.


It includes the `cid` of data to be pinned and optional metadata in `providers` and `meta`.


### Pin status object

The `PinStatus` object is a representation of a pinning operation.

It includes the original `pin` object, along with current `status` and `id`, which which can be used for status checks and management.


## The pin lifecycle


### Creating a new pin object

The user sends one or more `Pin` objects via `POST /pins` and receives `PinStatus` response for each:

- `id` in `PinStatus` is `cid-of-pin-object`, which can can be used for checking status, modifying the pin, and/or removing the pin in the future

- `status` in `PinStatus` indicates the current state of a pin


### Checking status of in-progress pinning

`status` (in `PinStatus`) may indicate a pending state (`queued` or `pinning`). This means the data behind `Pin.cid` was not found on the pinning service and is being fetched from the IPFS network at large, which may take time.


In this case, the user can periodically check pinning progress via `GET /pins/{cid-of-pin-object}` until pinning is successful, or the user decides to remove the pending pin.


### Modifying an existing pin object

The user can modify an existing pin object via `POST /pins/{cid-of-pin-object}`. The new pin object `id` is returned in the `PinStatus` response. The old pin object is deleted automatically.


### Removing a pin object

A pin object can be removed via `DELETE /pins/{cid-of-pin-object}`.



## Provider hints

Pinning of new data can be accelerated by providing a list of known data
sources in `Pin.providers` and connecting at least one of them to pinning
service nodes at `PinStatus.providers`.


The most common scenario is a client putting own IPFS node's multiaddrs in
`Pin.providers`  and then directly connecting to every multiaddr returned by
Pinning Service in `PinStatus.providers` to initiate transfer.


This ensures data transfer starts immediately (without waiting for provider
discovery over DHT) and direct dial from a client works around peer routing
issues in restrictive network topologies such as NAT.


## Custom metadata

Pinning services are encouraged to add support for additional features by leveraging the following optional `meta` attributes. Note that it is OK to ommit or ignore `meta` attributes; doing so should not impact the basic pinning functionality.


- `Pin.meta[app_id]`: Attaching a unique identifier to pins created by an app enables filtering pins per app via `?meta={\"app_id\":<UUID>}`

- `PinStatus.meta[status_details]`: Service-specific details. For example, when `PinStatus.status=failed` it could provide a reason why a pin operation failed (e.g. lack of funds, DAG too big, etc.)


While these attributes can be vendor-specific, we encourage the community at large to leverage these `meta` attributes as a sandbox to come up with conventions that could become part of future revisions of this API.


# Pagination and filtering

Pin objects can be listed by executing `GET /pins` with optional parameters:


- When no filters are provided, the endpoint will return a small batch of 10 most
  recently created items, from the latest to the oldest.

- The number of returned items can be adjusted with `limit` parameter
  (implicit default is 10).

- If the value in `PinResults.count` is bigger than the length of
  `PinResults.results`, the client can infer there are more results that can be queried.

- To read more items, pass the `before` filter with the timestamp from
  `PinStatus.created` found in the oldest item in the current batch of results.
  Repeat to read all results.

- Returned results can be fine-tuned by applying optional `after`, `cid`,
  `status` or `meta` filters.


> **Note**: pagination by the `created` timestamp requires each value to be
  globally unique. Any future considerations to add support for bulk creation
  must account for this.


# Authorization

An opaque authorization token is required to be sent with each request. There are two ways of doing so:

1. Using an HTTP header: `Authorization: Bearer <auth>`

2. Using a query parameter: `&auth=<auth>`


The `auth` token should be generated per device, and user should have ability to revoke each token separately.

"

servers:
  - url: https://pinning-service.example.com

paths:
  /pins:
    get:
      summary: List pin objects
      description: List all the pin objects, matching optional filters. When no filter is provided, only successfull pins are returned.
      tags:
        - pins
      parameters:
        - $ref: '#/components/parameters/cid'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/meta'
        - $ref: '#/components/parameters/auth'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinResults'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add pin object
      description: Add a new pin object for the current access token.
      tags:
        - pins
      parameters:
        - $ref: '#/components/parameters/auth'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pin'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinResults'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/InsufficientFunds'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /pins/{cid-of-pin-object}:
    parameters:
      - name: cid-of-pin-object
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/auth'
    get:
      summary: Get pin object
      description: Get a pin object and its status.
      tags:
        - pins
      parameters:
        - $ref: '#/components/parameters/auth'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Modify pin object
      description: Modify an existing pin object.
      tags:
        - pins
      parameters:
        - $ref: '#/components/parameters/auth'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Pin'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/InsufficientFunds'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Remove pin object
      description: Remove a pin object.
      tags:
        - pins
      parameters:
        - $ref: '#/components/parameters/auth'
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:

    PinResults:
      description: Response used for listing Pin objects matching request
      type: object
      required:
        - count
        - results
      properties:
        count:
          description: The total number of pin objects that exist for passed query filters
          type: integer
          format: int32
          minimum: 0
        results:
          description: An array of PinStatus results
          type: array
          items:
            $ref: '#/components/schemas/PinStatus'
          uniqueItems: true
          minItems: 0
          maxItems: 1000

    PinStatus:
      description: pin object with status
      type: object
      required:
        - id
        - status
        - created
        - pin
        - providers
      properties:
        id:
          description: CID of pin object; can be used to check status of ongoing pinning
          type: string
          example: "QmPinObject"
        status:
          $ref: '#/components/schemas/Status'
        created:
          description: immutable timestamp; indicates when pin request entered pinning service; can be used for filtering results and pagination
          type: string
          format: date-time  # RFC 3339, section 5.6
          example: "2020-07-27T17:32:28Z"
        pin:
          $ref: '#/components/schemas/Pin'
        providers:
          $ref: '#/components/schemas/ServiceProviders'
        meta:
          $ref: '#/components/schemas/StatusMeta'

    Pin:
      description: pin object
      type: object
      required:
        - cid
      properties:
        cid:
          description: CID to be pinned recursively
          type: string
          example: "QmCIDToBePinned"
        providers:
          $ref: '#/components/schemas/DataProviders'
        meta:
          $ref: '#/components/schemas/PinMeta'

    Status:
      description: status a pin object can have at a pinning service
      type: string
      enum:
        - queued     # pinning operation is waiting in the queue, additional info can be returned in meta[status_details]      
        - pinning    # pinning in progress, additional info can be returned in meta[status_details]
        - pinned     # pinned successfully
        - failed     # pining service was unable to finish pinning operation, additional info can be found in meta[status_details]

    ServiceProviders:
      description: list of multiaddrs designated by pinning service for transferring any new data from external peers
      type: array
      items:
        type: string
      uniqueItems: true
      minItems: 1
      maxItems: 20
      example: ['/dnsaddr/pin-service.example.com']

    DataProviders:
      description: optional list of multiaddrs known to provide the data
      type: array
      items:
        type: string
      uniqueItems: true
      minItems: 0
      maxItems: 20
      example: ['/p2p/QmSourcePeerId']

    PinMeta:
      description: optional metadata for pin object
      type: object
      additionalProperties:
        type: string
        minProperties: 0
        maxProperties: 1000        
      example:
        app_id: "99986338-1113-4706-8302-4420da6158aa" # Pin.meta[app_id], useful for filtering pins per app

    StatusMeta:
      description: optional metadata for PinStatus response
      type: object
      additionalProperties:
        type: string
        minProperties: 0
        maxProperties: 1000        
      example:
        status_details: "Fetching new data: 50% complete" # PinStatus.meta[status_details], when status=pinning

    Error:
      description: base error object
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string

  parameters:

    before:
      description: return results created (queued) before provided timestamp
      name: before
      in: query
      required: false
      schema:
        type: string
        format: date-time  # RFC 3339, section 5.6
      example: "2020-07-27T17:32:28Z"

    after:
      description: return results created (queued) after provided timestamp
      name: after
      in: query
      required: false
      schema:
        type: string
        format: date-time  # RFC 3339, section 5.6
      example: "2020-07-27T17:32:28Z"

    limit:
      description: max records to return
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        default: 10

    cid:
      description: return pin objects for the specified CID(s)
      name: cid
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
        uniqueItems: true
        minItems: 1
        maxItems: 1000
      style: form # ?cid=Qm1,Qm2,bafy3
      explode: false
      examples:
        oneId:
          summary: example of a single CID
          value: [QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR]   # ?cid=Qm
        multipleIds:
          summary: example of multiple CIDs
          value: [QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR,bafkreigtdgsgv2f3bkhsmxvku3bpnnqzubcxeupf7fff5f7l7tlm2v237a]   # ?cid=Qm,bafy

    status:
      description: return pin objects for pins with the specified status
      name: status
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Status'
        uniqueItems: true
        minItems: 1
      style: form # ?status=queued,pinning
      explode: false

    meta:
      description: return pin objects that match specified metadata
      name: meta
      in: query
      required: false
      content:
        application/json: # ?meta={"foo":"bar"}
          schema:
            $ref: '#/components/schemas/PinMeta'

    auth:
      description: optional auth token (alternative to Authorization header)
      name: auth
      in: query
      required: false
      schema:
        type: string

  responses:
    BadRequest:
      description: Bad request (400)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized (401)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: The specified resource was not found (404)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InsufficientFunds:
      description: Insufficient funds (409)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error (500)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    tokenAuth:
      type: http
      scheme: bearer
security:
  - tokenAuth: []
