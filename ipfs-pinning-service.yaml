openapi: 3.0.0
info:
  version: "0.0.5"
  title: 'IPFS Pinning Service API'
  x-logo:
    url: "https://bafybeidehxarrk54mkgyl5yxbgjzqilp6tkaz2or36jhq24n3rdtuven54.ipfs.dweb.link/?filename=ipfs-pinning-service.svg"
  description: "
  
  
## About this spec

The IPFS Pinning Service API is intended to be an implementation-agnostic API&#x3a;

- For use and implementation by pinning service providers

- For use in client mode by IPFS nodes and GUI-based applications


> **Note**: while ready for implementation, this spec is still a work in progress! üèóÔ∏è  **Your input and feedback are welcome and valuable as we develop this API spec. Please join the design discussion at [github.com/ipfs/pinning-services-api-spec](https://github.com/ipfs/pinning-services-api-spec).**


# Schemas

This section describes the most important object types and conventions.


A full list of fields and schemas can be found in the `schemas` section of the [YAML file](https://github.com/ipfs/pinning-services-api-spec/blob/master/ipfs-pinning-service.yaml).

## Objects

### Pin object


![pinning-services-api-pin-object.png](https://bafybeidcoyxd723nakggdayy6qg25bl7mls3ilwwiyxmys5qpek7y6jwc4.ipfs.dweb.link/?filename=pinning-services-api-pin-object.png)


The `Pin` object is a representation of a pin request.


It includes the `cid` of data to be pinned, as well as optional metadata in `name`, `origins`, and `meta`.


### Pin status response


![pinning-services-api-pin-status-response.png](https://bafybeiec3c3gzsus4rksddsuxcybilex3odq5cm2cyrzrb7m3suwspl6uy.ipfs.dweb.link/?filename=pinning-services-api-pin-status-response.png)


The `PinStatus` object is a representation of the current state of a pinning operation.

It includes the original `pin` object, along with the current `status` and globally unique `id` of the entire pinning request, which can be used for future status checks and management.
Addresses in the `delegates` array are peers delegated by the pinning service for facilitating direct file transfers (more details in the provider hints section). Any additional vendor-specific information is returned in optional `info`.


## The pin lifecycle


![pinning-services-api-objects.png](https://bafybeigyefq6vwfcsi7dfgqunf4uei426lvia3w73ylg4kgdwwg6txivpe.ipfs.dweb.link/?filename=pinning-services-api-objects.png)


### Creating a new pin object

The user sends a `Pin` object to `POST /pins` and receives a `PinStatus` response:

- `id` in `PinStatus` is the identifier of the pin operation, which can can be used for checking status, modifying the pin, and/or removing the pin in the future

- `status` in `PinStatus` indicates the current state of a pin


### Checking status of in-progress pinning

`status` (in `PinStatus`) may indicate a pending state (`queued` or `pinning`). This means the data behind `Pin.cid` was not found on the pinning service and is being fetched from the IPFS network at large, which may take time.


In this case, the user can periodically check pinning progress via `GET /pins/{id}` until pinning is successful, or the user decides to remove the pending pin.


### Modifying an existing pin object

The user can modify an existing pin object via `POST /pins/{id}`. The new pin object `id` is returned in the `PinStatus` response. The old pin object is deleted automatically.


### Removing a pin object

A pin object can be removed via `DELETE /pins/{id}`.



## Provider hints

Pinning of new data can be accelerated by providing a list of known data
sources in `Pin.origins`, and connecting at least one of them to pinning
service nodes at `PinStatus.delegates`.


The most common scenario is a client putting its own IPFS node's multiaddrs in
`Pin.origins`,  and then directly connecting to every multiaddr returned by
a pinning service in `PinStatus.delegates` to initiate transfer.


This ensures data transfer starts immediately (without waiting for provider
discovery over DHT), and direct dial from a client works around peer routing
issues in restrictive network topologies such as NATs.


## Custom metadata

Pinning services are encouraged to add support for additional features by leveraging the optional `Pin.meta` and `PinStatus.info` fields.
While these attributes can be application- or vendor-specific, we encourage the community at large to leverage these attributes as a sandbox to come up with conventions that could become part of future revisions of this API.

### Pin metadata

String keys and values passed in `Pin.meta` are persisted with the pin object.


Potential uses:

- `Pin.meta[app_id]`: Attaching a unique identifier to pins created by an app enables filtering pins per app via `?meta={\"app_id\":<UUID>}`

- `Pin.meta[vendor_policy]`: Vendor-specific policy (for example: which region to use, how many copies to keep)


Note that it is OK for a client to omit or ignore these optional attributes; doing so should not impact the basic pinning functionality.


### Pin status info

Additional `PinStatus.info` can be returned by pinning service.


Potential uses:

- `PinStatus.info[status_details]`: more info about the current status (queue
  position, percentage of transferred data, summary of where data is stored, etc); when
  `PinStatus.status=failed`, it could provide a reason why a pin operation
  failed (e.g. lack of funds, DAG too big, etc.)

- `PinStatus.info[dag_size]`: the size of pinned data, along with DAG overhead

- `PinStatus.info[raw_size]`: the size of data without DAG overhead (eg. unixfs)

- `PinStatus.info[pinned_until]`: if vendor supports time-bound pins, this could indicate when the pin will expire


# Pagination and filtering

Pin objects can be listed by executing `GET /pins` with optional parameters:


- When no filters are provided, the endpoint will return a small batch of the 10 most
  recently created items, from the latest to the oldest.

- The number of returned items can be adjusted with the `limit` parameter
  (implicit default is 10).

- If the value in `PinResults.count` is bigger than the length of
  `PinResults.results`, the client can infer there are more results that can be queried.

- To read more items, pass the `before` filter with the timestamp from
  `PinStatus.created` found in the oldest item in the current batch of results.
  Repeat to read all results.

- Returned results can be fine-tuned by applying optional `after`, `cid`, `name`,
  `status`, or `meta` filters.


> **Note**: pagination by the `created` timestamp requires each value to be
  globally unique. Any future considerations to add support for bulk creation
  must account for this.


"

servers:
  - url: https://pinning-service.example.com

paths:
  /pins:
    get:
      summary: List pin objects
      description: List all the pin objects, matching optional filters; when no filter is provided, only successful pins are returned
      tags:
        - pins
      parameters:
        - $ref: '#/components/parameters/cid'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/meta'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinResults'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add pin object
      description: Add a new pin object for the current access token
      tags:
        - pins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pin'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/InsufficientFunds'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /pins/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get pin object
      description: Get a pin object and its status
      tags:
        - pins
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Modify pin object
      description: Modify an existing pin object
      tags:
        - pins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pin'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/InsufficientFunds'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Remove pin object
      description: Remove a pin object
      tags:
        - pins
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:

    PinResults:
      description: Response used for listing pin objects matching request
      type: object
      required:
        - count
        - results
      properties:
        count:
          description: The total number of pin objects that exist for passed query filters
          type: integer
          format: int32
          minimum: 0
          example: 1
        results:
          description: An array of PinStatus results
          type: array
          items:
            $ref: '#/components/schemas/PinStatus'
          uniqueItems: true
          minItems: 0
          maxItems: 1000

    PinStatus:
      description: Pin object with status
      type: object
      required:
        - id
        - status
        - created
        - pin
        - delegates
      properties:
        id:
          description: Globally unique ID of the pin request; can be used to check the status of ongoing pinning, modification of pin object, or pin removal
          type: string
          example: "UniqueIdOfPinRequest"
        status:
          $ref: '#/components/schemas/Status'
        created:
          description: Immutable timestamp indicating when a pin request entered a pinning service; can be used for filtering results and pagination
          type: string
          format: date-time  # RFC 3339, section 5.6
          example: "2020-07-27T17:32:28Z"
        pin:
          $ref: '#/components/schemas/Pin'
        delegates:
          $ref: '#/components/schemas/Delegates'
        info:
          $ref: '#/components/schemas/StatusInfo'

    Pin:
      description: Pin object
      type: object
      required:
        - cid
      properties:
        cid:
          description: CID to be pinned recursively
          type: string
          example: "QmCIDToBePinned"
        name:
          description: Optional name for pinned data; can be used for lookups later
          type: string
          maxLength: 255
          example: "my precious data"
        origins:
          $ref: '#/components/schemas/Origins'
        meta:
          $ref: '#/components/schemas/PinMeta'

    Status:
      description: Status a pin object can have at a pinning service
      type: string
      enum:
        - queued     # pinning operation is waiting in the queue; additional info can be returned in info[status_details]      
        - pinning    # pinning in progress; additional info can be returned in info[status_details]
        - pinned     # pinned successfully
        - failed     # pinning service was unable to finish pinning operation; additional info can be found in info[status_details]

    Delegates:
      description: List of multiaddrs designated by pinning service for transferring any new data from external peers
      type: array
      items:
        type: string
      uniqueItems: true
      minItems: 1
      maxItems: 20
      example: ['/dnsaddr/pin-service.example.com']

    Origins:
      description: Optional list of multiaddrs known to provide the data
      type: array
      items:
        type: string
      uniqueItems: true
      minItems: 0
      maxItems: 20
      example: ['/p2p/QmSourcePeerId']

    PinMeta:
      description: Optional metadata for pin object
      type: object
      additionalProperties:
        type: string
        minProperties: 0
        maxProperties: 1000
      example:
        app_id: "99986338-1113-4706-8302-4420da6158aa" # Pin.meta[app_id], useful for filtering pins per app

    StatusInfo:
      description: Optional info for PinStatus response
      type: object
      additionalProperties:
        type: string
        minProperties: 0
        maxProperties: 1000
      example:
        status_details: "Queue position: 7 of 9" # PinStatus.info[status_details], when status=queued

    Error:
      description: Base error object
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string

  parameters:

    before:
      description: Return results created (queued) before provided timestamp
      name: before
      in: query
      required: false
      schema:
        type: string
        format: date-time  # RFC 3339, section 5.6
      example: "2020-07-27T17:32:28Z"

    after:
      description: Return results created (queued) after provided timestamp
      name: after
      in: query
      required: false
      schema:
        type: string
        format: date-time  # RFC 3339, section 5.6
      example: "2020-07-27T17:32:28Z"

    limit:
      description: Max records to return
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        default: 10

    cid:
      description: Return pin objects responsible for pinning the specified CID(s)
      name: cid
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
        uniqueItems: true
        minItems: 1
        maxItems: 1000
      style: form # ?cid=Qm1,Qm2,bafy3
      explode: false
      examples:
        oneId:
          summary: Example of a single CID
          value: [QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR]   # ?cid=Qm
        multipleIds:
          summary: Example of multiple CIDs
          value: [QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR,bafkreigtdgsgv2f3bkhsmxvku3bpnnqzubcxeupf7fff5f7l7tlm2v237a]   # ?cid=Qm,bafy

    name:
      description: Return pin objects with names that contain provided value (partial or full match)
      name: name
      in: query
      required: false
      schema:
        type: string
        maxLength: 255
      example: "my precious"

    status:
      description: Return pin objects for pins with the specified status
      name: status
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Status'
        uniqueItems: true
        minItems: 1
      style: form # ?status=queued,pinning
      explode: false

    meta:
      description: Return pin objects that match specified metadata
      name: meta
      in: query
      required: false
      content:
        application/json: # ?meta={"foo":"bar"}
          schema:
            $ref: '#/components/schemas/PinMeta'

  responses:
    BadRequest:
      description: Bad request (400)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized (401); access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: The specified resource was not found (404)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InsufficientFunds:
      description: Insufficient funds (409)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error (500)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    accessToken:
      description: "
An opaque token is required to be sent with each request in the HTTP header:

- `Authorization: Bearer <access-token>`


The `access-token` should be generated per device, and the user should have the ability to revoke each token separately.
"
      type: http
      scheme: bearer
security:
  - accessToken: []
